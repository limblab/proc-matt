%%
clear
clc;
close all;

if 0
    a = reshape(e_pr2{2},numel(e_pr2{2}),1);
    g = reshape( repmat(1:size(e_pr2{2},2),size(e_pr2{2},1),1), numel(e_pr2{2}), 1 );
    anovan(a,g,'Display','off')
end

dataSummary;

basenames = {'trainad','trainad','trainad'};
extranames = {'test','test','test'};
% extranames = {'test','test','test'}; % for VR
array_models = {'M1-M1','PMd-PMd','PMd-M1'};

% % M1PMd sessions
sessions = { ...
    'Chewie','2016-09-09'; ... % VR
    'Chewie','2016-09-12'; ...
    'Chewie','2016-09-14'; ...
    'Chewie','2016-10-06'; ...
    'Mihili','2014-03-03'; ...
    'Mihili','2014-03-04'; ...
    'Mihili','2014-03-06'; ...
    'Mihili','2015-06-23'; ...
    'Mihili','2015-06-25'; ...
    'Mihili','2015-06-26'; ...
    'Chewie','2016-09-15'; ... % CF
    'Chewie','2016-10-05'; ...
    'Chewie','2016-10-07'; ...
    'Chewie','2016-10-11'; ...
    'Mihili','2014-02-03'; ...
    'Mihili','2014-02-17'; ...
    'Mihili','2014-02-18'; ...
    'Mihili','2014-03-07'; ...
    'Mihili','2015-06-15'; ...
    'Mihili','2015-06-16'; ...
    'Mihili','2015-06-17'; ...
    'MrT','2013-08-19'; ... % CF
    'MrT','2013-08-21'; ...
    'MrT','2013-08-23'; ...
    % COMMENT THIS LOWER STUFF OUT FOR VR
%     'Chewie','2013-10-22'; ...
%     'Chewie','2013-10-23'; ...
%     'Chewie','2013-10-31'; ...
%     'Chewie','2013-11-01'; ...
%     'Chewie','2013-12-03'; ...
%     'Chewie','2013-12-20'; ...
%     'Chewie','2015-06-29'; ... % short washout
%     'Chewie','2015-06-30'; ...
%     'Chewie','2015-07-01'; ...
%     'Chewie','2015-07-03'; ...
%     'Chewie','2015-07-06'; ...
%     'Chewie','2015-07-13'; ... % short washout
%     'Chewie','2013-10-03'; ...
%     'Chewie','2015-07-10'; ...
%     'Chewie','2015-07-14'; ...
%     'Chewie','2015-07-15'; ...
%     'Chewie','2015-07-16'; ...
    };


pert = 'VR';
tasks = {'CO'};
dates = sessions(:,2);
monkeys = unique(sessions(:,1));

which_metric = 'rpr2'; % 'rpr2','pr2_full','pr2_basic'
pr2_cutoff = 0.01;
pr2_op = 'min'; % which operation for filtering ('min','max','mean','median')

do_hists = true;
error_bars = 'boot'; % 'boot','ste'
num_bootstraps = 1000;

epochs = {'AD'};


%%

plot_colors = [0    0.4470    0.7410; ...
    0.8500    0.3250    0.0980; ...
    %     0.9290    0.6940    0.1250; ...
    0.4940    0.1840    0.5560; ...
    0.4660    0.6740    0.1880; ...
    0.3010    0.7450    0.9330; ...
    0.6350    0.0780    0.1840];

session_idx = ismember(filedb.Monkey,monkeys) & ismember(filedb.Perturbation,pert) & ismember(filedb.Task,tasks) & ismember(filedb.Date,dates);


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
figure; hold all;
h = zeros(length(basenames));
for idx_cond = 1:length(basenames)
    if do_hists
        subplot(1,length(basenames),idx_cond);
    end
    if isempty(extranames{idx_cond})
        outputSubdir = basenames{idx_cond};
    else
        outputSubdir = [basenames{idx_cond} '_' extranames{idx_cond}];
    end
    
    idx = find(strcmpi(pert,filedb.Perturbation) & session_idx);
    filenames = cell(1,length(idx));
    for s = 1:length(idx)
        filenames{s} = [filedb.Monkey{idx(s)} '_' filedb.Task{idx(s)} '_' filedb.Perturbation{idx(s)} '_' filedb.Date{idx(s)}];
    end
    
    % build list of filenames
    filepaths = cell(1,length(filenames));
    for file = 1:length(filenames)
        filepaths{file} = fullfile(rootDir,TDDir,outputSubdir,[pert '-' array_models{idx_cond} '_' filenames{file} '.mat']);
    end
    
    out_struct = get_plot_metrics(filepaths, ...
        struct( ...
        'which_metric',which_metric, ...
        'epochs',{epochs}, ...
        'pr2_cutoff',pr2_cutoff, ...
        'pr2_op',pr2_op, ...
        'pr2_ad_check', false, ...
        'do_good_cells',true, ...
        'do_behavior',false));
    
    cv = out_struct.cv;
    e_pr2 = out_struct.e_pr2;
    e_inds = out_struct.e_inds;
    total_significant = out_struct.total_significant;
    total_cells = out_struct.total_cells;
    
    
    disp([outputSubdir ' - ' array_models{idx_cond} ' - % cells with significant rel-pseudo-r2: ' num2str(total_significant) '/' num2str(total_cells)]);
    disp([outputSubdir ' - ' array_models{idx_cond} ' - Mean baseline metric: ' num2str(mean(mean(cv,2))) ' +/- ' num2str(std(mean(cv,2)))]);
    
    if do_hists
        hist(mean(cv,2),-0.1:0.005:1)
        title(array_models{idx_cond},'FontSize',14);
        ylabel('Count','FontSize',14); xlabel(which_metric,'FontSize',14);
        set(gca,'Box','off','TickDir','out','FontSize',14,'XLim',[-0.1,1]);
    else
        cv = (max(cv,[],2)-min(cv,[],2))./mean(cv,2);
        m = mean(cv);
        
        switch lower(error_bars)
            case 'boot'
                bs = randi(numel(cv),numel(cv),num_bootstraps);
                s = prctile( mean(cv(bs),1),[2.5,97.5])';
            case 'ste'
                s = [m-std(cv)./sqrt(length(cv)), m+std(cv)./sqrt(length(cv))];
        end
        plot(idx_cond,m,'o','LineWidth',3,'Color',plot_colors(idx_cond,:));
        h(idx_cond) = plot([idx_cond, idx_cond],s,'-','LineWidth',3,'Color',plot_colors(idx_cond,:));
    end
    
end

if ~do_hists
    set(gca,'Box','off','TickDir','out','FontSize',14,'XLim',[0, length(array_models)+1]);
    legend(h,array_models,'FontSize',14);
end

